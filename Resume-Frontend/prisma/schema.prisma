// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  isActive      Boolean   @default(true) @map("is_active")
  isAdmin       Boolean   @default(false) @map("is_admin")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")
  resetToken    String?   @map("reset_token")
  resetTokenExpires DateTime? @map("reset_token_expires")
  uploads       Upload[]
  analyses      AnalysisResult[]
  jobDescriptions JobDescription[]

  @@map("users")
}

model JobDescription {
  id          Int      @id @default(autoincrement())
  rawText     String   @map("raw_text") @db.Text
  analysisData Json    @map("analysis_data")
  contentHash String   @map("content_hash")
  createdAt   DateTime @default(now()) @map("created_at")
  analyses    AnalysisResult[]
  userId      Int?     @map("user_id")
  user        User?    @relation(fields: [userId], references: [id])

  @@map("job_descriptions")
}

model Upload {
  id            Int       @id @default(autoincrement())
  fileName      String    @map("filename")
  processedText String?   @map("processed_text")
  createdAt     DateTime  @default(now()) @map("created_at")
  userId        Int       @map("user_id")
  user          User      @relation(fields: [userId], references: [id])
  analyses      AnalysisResult[]

  @@map("uploads")
}

model AnalysisResult {
  id                Int      @id @default(autoincrement())
  jobId             Int      @map("job_id")
  resumeText        String   @map("resume_text") @db.Text
  jobDescriptionText String? @map("job_description_text") @db.Text
  score             Float?
  industry          String?  @db.VarChar(50)
  analysisVersion   String?  @map("analysis_version") @db.VarChar(20)
  analysisData      Json     @map("analysis_data")
  createdAt         DateTime @default(now()) @map("created_at")
  userId            Int      @map("user_id")
  uploadId          Int?     @map("upload_id")
  user              User     @relation(fields: [userId], references: [id])
  upload            Upload?  @relation(fields: [uploadId], references: [id])
  job               JobDescription @relation(fields: [jobId], references: [id])

  @@map("analysis_results")
}

model Analysis {
  id           Int      @id @default(autoincrement())
  jobId        Int      @map("job_id")
  resumeText   String   @map("resume_text")
  analysisData Json     @map("analysis_data")
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([jobId])
} 